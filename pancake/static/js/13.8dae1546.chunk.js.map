{"version":3,"sources":["views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/Tooltip/Tooltip.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/components/Select/Select.tsx","views/Farms/Farms.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx"],"names":["ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","Wrapper","styled","div","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","TranslateString","useI18n","justifyContent","href","name","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","split","variant","StyledTokenInput","theme","colors","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","isBalanceZero","displayBalance","parseFloat","toFixed","style","position","pl","fontSize","toLocaleString","placeholder","scale","onClick","mr","color","bold","external","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","handleSelectMax","title","ModalActions","disabled","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","HarvestAction","earnings","account","useWeb3React","onReward","useHarvest","rawEarningsBalance","Action","CardActions","farm","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","allowance","lpAddress","getAddress","lpName","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApprove","handleApprove","console","error","textTransform","pr","mt","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","apy","oneThousandDollarsWorthOfCake","toNumber","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","event","stopPropagation","ml","RainbowLight","keyframes","StyledCardAccent","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","expanded","FarmCard","showExpandableSection","setShowExpandableSection","communityFarms","includes","token","toLocaleLowerCase","liquidity","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPY","liquidityUrlPathParts","quoteToken","address","BASE_ADD_LIQUIDITY_URL","display","CardActionsContainer","ExpandableSectionButton","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","Amount","span","earned","textDisabled","Earned","primary","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","TooltipContent","tooltip","zIndices","modal","Tooltip","content","children","MultiplierWrapper","Multiplier","displayMultiplier","toLowerCase","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","userData","earningsBigNumber","BigNumber","usePriceCakeBusd","earningsBusd","multipliedBy","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","useEffect","current","lg","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","apr","isActive","bsc","info","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","setActionPanelToggled","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","ref","row","original","scrollIntoView","behavior","FarmTabButtons","useRouteMatch","url","isExact","activeIndex","as","Link","to","InputWrapper","SearchInput","setToggled","inputEl","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","DropDownHeader","inputSecondary","DropDownListContainer","dropdown","DropDownContainer","isOpen","css","boxShadow","DropDownList","ul","ListItem","li","Select","options","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","option","offsetWidth","offsetHeight","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Header","gradients","bubblegum","Farms","path","pathname","useLocation","farmsLP","useFarms","query","setQuery","setViewMode","sortOption","setSortOption","prices","useGetApiPrices","dispatch","useDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","stakedOnly","setStakedOnly","activeFarms","filter","inactiveFarms","stakedOnlyFarms","stakedInactiveFarms","log","farmsList","farmsToDisplay","farmsToDisplayWithAPY","lpTotalInQuoteToken","quoteTokenPriceUsd","totalLiquidity","times","getFarmApy","poolWeight","lowercaseQuery","farmsStaked","rowData","farms","orderBy","slice","sortFarms","size","Page","checked","marginLeft","target","length","sort","b","exact","renderContent","aria-label","role","defaultProps"],"mappings":"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","file":"static/js/13.8dae1546.chunk.js","sourcesContent":["export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  translationId: number\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APY: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    translationId: 999,\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    translationId: 999,\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(354, 'Total Liquidity')}:</Text>\n        <Text>{totalValueFormatted}</Text>\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>\n          {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\n        </StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n}) => {\n  const TranslateString = useI18n()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\n          </Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {TranslateString(452, 'Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          No tokens to stake:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {TranslateString(999, 'get')} {symbol}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={TranslateString(1070, 'Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {TranslateString(999, 'Get')} {tokenName}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={TranslateString(588, 'Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useWeb3React } from '@web3-react/core'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {TranslateString(562, 'Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { provider as ProviderType } from 'web3-core'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useApprove } from 'hooks/useApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  provider?: ProviderType\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = getAddress(lpAddresses)\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const web3 = useWeb3()\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(758, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1072, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1074, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: number\n  addLiquidityUrl?: string\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  cakePrice,\n  apy,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy: apy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy: apy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy: apy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({\n    numberOfDays: 365,\n    farmApy: apy,\n    cakePrice,\n  })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(860, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(858, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(864, 'CAKE per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          866,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={addLiquidityUrl}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap-libs/uikit'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apy, addLiquidityUrl }) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal lpLabel={lpLabel} cakePrice={cakePrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider as ProviderType } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: number\n  liquidity?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 50%;\n\t}\n\t50% {\n\t\tbackground-position: 100% 50%;\n\t}\n\t100% {\n\t\tbackground-position: 0% 50%;\n\t}\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 32px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  provider?: ProviderType\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const isCommunityFarm = communityFarms.includes(farm.token.symbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n\n  const totalValueFormatted = farm.liquidity\n    ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'CAKE'\n\n  const farmAPY = farm.apy && farm.apy.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n\n  return (\n    <FCard>\n      {farm.token.symbol === 'CAKE' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={isCommunityFarm}\n        farmImage={farmImage}\n        tokenSymbol={farm.token.symbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(736, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={farm.apy} />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport useI18n from 'hooks/useI18n'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apy={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>{TranslateString(656, 'Loading...')}</AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { Text, Image } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  image: string\n}\n\nconst IconImage = styled(Image)`\n  width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const TranslateString = useI18n()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          {TranslateString(999, 'FARMING')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedProps> = ({ earnings }) => {\n  const { account } = useWeb3React()\n  const amountEarned = account ? earnings : null\n\n  const displayBalance = amountEarned ? amountEarned.toLocaleString() : '?'\n  return <Amount earned={amountEarned}>{displayBalance}</Amount>\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const TranslateString = useI18n()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && TranslateString(658, 'Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface TooltipProps {\n  content: React.ReactNode\n}\n\nconst TooltipContent = styled.div`\n  background: ${({ theme }) => theme.tooltip.background};\n  padding: 16px;\n  border-radius: 16px;\n  color: ${({ theme }) => theme.tooltip.text};\n  width: max-content;\n  display: none;\n  padding: 16px;\n  max-height: 500px;\n  z-index: ${({ theme }) => theme.zIndices.modal};\n  position: absolute;\n  bottom: calc(100% + 16px);\n  transform: translate(34px, 0);\n  right: 0;\n  max-width: 246px;\n\n  &:after {\n    content: '';\n    display: block;\n    width: 0;\n    height: 0;\n    border-left: 10px solid transparent;\n    border-right: 10px solid transparent;\n    border-top: 10px solid ${({ theme }) => theme.tooltip.background};\n    bottom: 0;\n    position: absolute;\n    transform: translate(-34px, 9px);\n    right: 0;\n  }\n`\n\nconst Container = styled.div`\n  position: relative;\n\n  &:hover ${TooltipContent}, &:focus-within ${TooltipContent} {\n    display: block;\n  }\n`\n\nconst Tooltip: React.FunctionComponent<TooltipProps> = ({ content, children }) => {\n  return (\n    <Container>\n      {children}\n      <TooltipContent>{content}</TooltipContent>\n    </Container>\n  )\n}\n\nexport default Tooltip\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <Tooltip\n        content={\n          <div>\n            {TranslateString(999, 'The multiplier represents the amount of CAKE rewards each farm gets.')}\n            <br />\n            <br />\n            {TranslateString(\n              999,\n              'For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.',\n            )}\n          </div>\n        }\n      >\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface LiquidityProps {\n  liquidity: number\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity = liquidity\n    ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <Tooltip content={TranslateString(999, 'The total value of the funds in this farm’s liquidity pool')}>\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useHarvest } from 'hooks/useHarvest'\nimport useI18n from 'hooks/useI18n'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useCountUp } from 'react-countup'\n\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\n\nconst HarvestAction: React.FunctionComponent<FarmWithStakedValue> = ({ pid, userData }) => {\n  const { account } = useWeb3React()\n  const earningsBigNumber = userData && account ? new BigNumber(userData.earnings) : null\n  const cakePrice = usePriceCakeBusd()\n  let earnings = null\n  let earningsBusd = 0\n  let displayBalance = '?'\n\n  if (earningsBigNumber) {\n    earnings = getBalanceNumber(earningsBigNumber)\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toLocaleString()\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const TranslateString = useI18n()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>CAKE </Title>\n        <Subtle>{TranslateString(999, 'EARNED')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          <Staked>~{countUp}USD</Staked>\n        </div>\n        <Button\n          disabled={!earnings || pendingTx || !account}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n          ml=\"4px\"\n        >\n          {TranslateString(562, 'Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon } from '@pancakeswap-libs/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser } from 'state/hooks'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport useI18n from 'hooks/useI18n'\nimport { useApprove } from 'hooks/useApprove'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport useWeb3 from 'hooks/useWeb3'\n\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\nconst Staked: React.FunctionComponent<FarmWithStakedValue> = ({ pid, lpSymbol, lpAddresses, quoteToken, token }) => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const web3 = useWeb3()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (rawStakedBalance) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Title>{lpSymbol} </Title>\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance}</Earned>\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\n          <Title>{lpSymbol}</Title>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" onClick={onPresentDeposit} variant=\"secondary\">\n            {TranslateString(999, 'Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {TranslateString(999, 'Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport { LinkExternal, Text } from '@pancakeswap-libs/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { communityFarms } from 'config/constants'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({ details, apr, multiplier, liquidity }) => {\n  const farm = details\n\n  const TranslateString = useI18n()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = `https://bscscan.com/address/${lpAddress}`\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\n  const isCommunityFarm = communityFarms.includes(token.symbol)\n\n  return (\n    <Container>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n              {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{TranslateString(736, 'APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} />\n        <StakedAction {...farm} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowProps> = (props) => {\n  const { details } = props\n  const [actionPanelToggled, setActionPanelToggled] = useState(false)\n  const TranslateString = useI18n()\n\n  const toggleActionPanel = () => {\n    setActionPanelToggled(!actionPanelToggled)\n  }\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelToggled} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={TranslateString(736, 'APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\n                      >\n                        {React.createElement(cells[key], props[key])}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={TranslateString(1072, 'Earned')}>\n                <Earned {...props.earned} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={TranslateString(736, 'APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelToggled} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {actionPanelToggled && details && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const TranslateString = useI18n()\n  const { data, columns } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {TranslateString(999, 'To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = () => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(1198, 'Live')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(388, 'Finished')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React, { useState, useRef } from 'react'\nimport { Input } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 234px;\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  value: string\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInput: React.FC<Props> = ({ value, onChange }) => {\n  const [toggled, setToggled] = useState(false)\n  const inputEl = useRef(null)\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          ref={inputEl}\n          value={value}\n          onChange={onChange}\n          placeholder=\"Search farms\"\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap-libs/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Text } from '@pancakeswap-libs/uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\n  cursor: pointer;\n  width: ${({ width }) => width}px;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps {\n  options: OptionProps[]\n  onChange?: (option: OptionProps) => void\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\n  const containerRef = useRef(null)\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(options[0])\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\n\n  const toggling = () => setIsOpen(!isOpen)\n\n  const onOptionClicked = (option: OptionProps) => () => {\n    setSelectedOption(option)\n    setIsOpen(false)\n\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  useEffect(() => {\n    setContainerSize({\n      width: dropdownRef.current.offsetWidth, // Consider border\n      height: dropdownRef.current.offsetHeight,\n    })\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\n      {containerSize.width !== 0 && (\n        <DropDownHeader onClick={toggling}>\n          <Text>{selectedOption.label}</Text>\n        </DropDownHeader>\n      )}\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option) =>\n            option.label !== selectedOption.label ? (\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { Farm } from 'state/types'\nimport useI18n from 'hooks/useI18n'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApy } from 'utils/apy'\nimport { orderBy } from 'lodash'\n\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport SearchInput from './components/SearchInput'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport Select, { OptionProps } from './components/Select/Select'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\n\nconst Header = styled.div`\n  padding: 32px 0px;\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useState(ViewMode.TABLE)\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const prices = useGetApiPrices()\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n  const isActive = !pathname.includes('history')\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n    switch (sortOption) {\n      case 'apr':\n        return orderBy(farms, (farm: FarmWithStakedValue) => farm.apy, 'desc')\n      case 'multiplier':\n        return orderBy(\n          farms,\n          (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\n      case 'liquidity':\n        return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n      default:\n        return farms\n    }\n  }\n  \n  console.log(cakePrice, 'cakePrice')\n  console.log(prices)\n  const farmsList = \n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      console.log(farmsToDisplay, 'farmsToDisplay')\n      let farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !prices) {\n          return farm\n        }\n        console.log(farm.quoteToken.symbol.toLowerCase())\n        const quoteTokenPriceUsd = prices[farm.quoteToken.symbol.toLowerCase()]\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n        const apy = isActive ? getFarmApy(farm.poolWeight, cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apy, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = query.toLowerCase()\n        farmsToDisplayWithAPY = farmsToDisplayWithAPY.filter((farm: FarmWithStakedValue) => {\n          return farm.lpSymbol.toLowerCase().includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPY\n    }\n  \n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  let farmsStaked = []\n  if (isActive) {\n    farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n  } else {\n    farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n  }\n\n  farmsStaked = sortFarms(farmsStaked)\n\n  const rowData = farmsStaked.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apy && farm.apy.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apy,\n      },\n      farm: {\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: farm.pid,\n      },\n      earned: {\n        earnings: farm.userData ? getBalanceNumber(new BigNumber(farm.userData.earnings)) : null,\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <Header>\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {TranslateString(674, 'Farms')}\n        </Heading>\n        <Heading size=\"lg\" color=\"text\">\n          {TranslateString(999, 'Stake Liquidity Pool (LP) tokens to earn.')}\n        </Heading>\n      </Header>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text> {TranslateString(1116, 'Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text>SORT BY</Text>\n              <Select\n                options={[\n                  {\n                    label: 'Hot',\n                    value: 'hot',\n                  },\n                  {\n                    label: 'APR',\n                    value: 'apr',\n                  },\n                  {\n                    label: 'Multiplier',\n                    value: 'multiplier',\n                  },\n                  {\n                    label: 'Earned',\n                    value: 'earned',\n                  },\n                  {\n                    label: 'Liquidity',\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text>SEARCH</Text>\n              <SearchInput onChange={handleChangeQuery} value={query} />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        <StyledImage src=\"/images/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? TranslateString(999, 'Hide') : TranslateString(658, 'Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n"],"sourceRoot":""}