{"version":3,"sources":["hooks/useTickets.ts","hooks/useTokenBalance.ts","views/Home/components/CardBusdValue.tsx","views/Home/components/CardValue.tsx","hooks/useGetLotteryHasDrawn.ts","utils/lotteryUtils.ts","hooks/useAllowance.ts","hooks/useBuyLottery.ts","hooks/useApproval.ts","views/Lottery/components/TicketCard/PurchaseWarningModal.tsx","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx"],"names":["useTotalRewards","useState","BigNumber","rewards","setRewards","lotteryContract","useLottery","fastRefresh","useRefresh","useEffect","a","getTotalRewards","res","fetchBalance","useTotalClaim","claimAmount","setClaimAmount","claimLoading","setClaimLoading","account","useWeb3React","ticketsContract","useLotteryTicket","useCallback","getTotalClaim","claim","useWinningNumbers","winningNumbers","setWinningNumbers","getWinningNumbers","useMatchingRewardLength","numbers","matchingNumbers","setMatchingNumbers","getMatchingRewardLength","matchedNumbaers","useTickets","lotteryNumber","tickets","setTickets","getTickets","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","web3","useWeb3","contract","getBep20Contract","balanceOf","useTokenBalance","CardBusdValue","props","fontSize","lineHeight","color","prefix","bold","decimals","CardValue","value","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","useGetLotteryHasDrawn","lotteryHasDrawn","setLotteryHasDrawn","getLotteryStatus","state","fetchLotteryStatus","multiCall","abi","calls","getWeb3NoAccount","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","length","i","newCalls","slice","calldata","map","toLowerCase","encodeFunctionData","aggregate","returnData","concat","index","decodeFunctionResult","multiBuy","price","numbersList","times","pow","toString","send","from","on","tx","transactionHash","console","error","customLotteryNum","issueIndex","getTicketsAmount","calls1","Array","apply","options","address","ticketAbi","tokenIds","id","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","eq","push","calls3","multiClaim","claimedStatus","unClaimedIds","filter","lotteryAbi","finalTokenIds","r","drawed","calls4","reduce","p","c","sum","getMax","maxNumber","getLotteryIssueIndex","matchNumber","historyAmount","amount","LOTTERY_TICKET_PRICE","parseInt","historyNumbers","useLotteryAllowance","allowance","setAllowance","useCake","getLotteryAddress","fetchAllowance","useIfoAllowance","tokenContract","spenderAddress","dependency","fetch","useMultiClaimLottery","lotteryTicketContract","onMultiClaim","txHash","useMultiBuyLottery","onMultiBuy","useMaxNumber","max","setMax","fetchMax","useApproval","onPresentApprove","requestedApproval","setRequestedApproval","onApprove","useLotteryApprove","handleApprove","TicketsList","styled","div","theme","colors","primary","WarningModal","onDismiss","TranslateString","useI18n","title","width","onClick","StyledTokenInput","StyledSpacer","spacing","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TicketInput","symbol","availableSymbol","onChange","onSelectMax","alignItems","placeholder","size","toLocaleString","Tips","BuyTicketModal","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","useMemo","getFullDisplayBalance","maxTickets","handleBuy","Math","floor","random","handleSelectMax","Number","LOTTERY_MAX_NUMBER_OF_TICKETS","e","currentTarget","num","Announce","Final","ModalActions","variant","disabled"],"mappings":"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","file":"static/js/0.f3162300.chunk.js","sourcesContent":["import { useCallback, useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport useRefresh from './useRefresh'\nimport {\n  getTotalRewards,\n  getTotalClaim,\n  getMatchingRewardLength,\n  getWinningNumbers,\n  getTickets,\n} from '../utils/lotteryUtils'\n\nconst useTickets = (lotteryNumber = null) => {\n  const [tickets, setTickets] = useState([])\n  const { account } = useWeb3React()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\n      setTickets(res)\n    }\n\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\n\n  return tickets\n}\n\nexport const useTotalRewards = () => {\n  const [rewards, setRewards] = useState(new BigNumber(0))\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTotalRewards(lotteryContract)\n      setRewards(new BigNumber(res))\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, fastRefresh])\n\n  return rewards\n}\n\nexport const useTotalClaim = () => {\n  const [claimAmount, setClaimAmount] = useState(new BigNumber(0))\n  const [claimLoading, setClaimLoading] = useState(false)\n  const { account } = useWeb3React()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n\n  const fetchBalance = useCallback(async () => {\n    setClaimLoading(true)\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\n    setClaimAmount(claim)\n    setClaimLoading(false)\n  }, [account, lotteryContract, ticketsContract])\n\n  useEffect(() => {\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, fetchBalance, lotteryContract, ticketsContract])\n\n  return { claimLoading, claimAmount }\n}\n\nexport const useWinningNumbers = () => {\n  const [winningNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const rewards = await getWinningNumbers(lotteryContract)\n      setWinningNumbers(rewards)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\n\n  return winningNumbers\n}\n\nexport const useMatchingRewardLength = (numbers) => {\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const matchedNumbaers = await getMatchingRewardLength(lotteryContract, numbers)\n      setMatchingNumbers(matchedNumbaers)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, numbers, fastRefresh])\n\n  return matchingNumbers\n}\n\nexport default useTickets\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useLottery } from 'hooks/useContract'\nimport { getLotteryStatus } from 'utils/lotteryUtils'\n\n/**\n * Returns whether or not the current lottery has drawn numbers\n *\n * @return {Boolean}\n */\nconst useGetLotteryHasDrawn = () => {\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\n  const { account } = useWeb3React()\n  const lotteryContract = useLottery()\n\n  useEffect(() => {\n    if (account && lotteryContract) {\n      const fetchLotteryStatus = async () => {\n        const state = await getLotteryStatus(lotteryContract)\n        setLotteryHasDrawn(state)\n      }\n\n      fetchLotteryStatus()\n    }\n  }, [account, lotteryContract])\n\n  return lotteryHasDrawn\n}\n\nexport default useGetLotteryHasDrawn\n","/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3NoAccount } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport ticketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { LOTTERY_TICKET_PRICE } from 'config'\nimport { AbiItem } from 'web3-utils'\nimport { getMulticallAddress } from './addressHelpers'\n\nexport const multiCall = async (abi, calls) => {\n  const web3 = getWeb3NoAccount()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n  let res = []\n  if (calls.length > 100) {\n    let i = 0\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n      const { returnData } = await multi.methods.aggregate(calldata).call()\n      i++\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\n    }\n  } else {\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n    const { returnData } = await multi.methods.aggregate(calldata).call()\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\n  }\n  return res\n}\n\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIndex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\n  const length = await getTicketsAmount(ticketsContract, account)\n\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n  const ticketIssues = await multiCall(ticketAbi, calls2)\n\n  const finalTokenids = []\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (new BigNumber(ticketIssue).eq(issueIndex)) {\n      finalTokenids.push(tokenIds[i])\n    }\n  })\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\n  const tickets = await multiCall(ticketAbi, calls3)\n\n  await getLotteryStatus(lotteryContract)\n  return tickets\n}\n\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.methods.balanceOf(account).call()\n}\n\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.methods.issueIndex().call()\n  const length = await getTicketsAmount(ticketsContract, account)\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n  const claimedStatus = await multiCall(ticketAbi, calls2)\n\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\n\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n  const rewards = await multiCall(lotteryAbi, calls3)\n\n  let finalTokenIds = []\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finalTokenIds.push(unClaimedIds[i])\n    }\n  })\n\n  if (finalTokenIds.length > 200) {\n    finalTokenIds = finalTokenIds.slice(0, 200)\n  }\n\n  try {\n    return lotteryContract.methods\n      .multiClaim(finalTokenIds)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIndex = await lotteryContract.methods.issueIndex().call()\n    const length = await getTicketsAmount(ticketsContract, account)\n    // eslint-disable-next-line prefer-spread\n    const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n      ticketsContract.options.address,\n      'tokenOfOwnerByIndex',\n      [account, i],\n    ])\n    const res = await multiCall(ticketAbi, calls1)\n    const tokenIds = res.map((id) => id.toString())\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n    const ticketIssues = await multiCall(ticketAbi, calls2)\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n    const claimedStatus = await multiCall(ticketAbi, calls3)\n\n    const drawed = await getLotteryStatus(lotteryContract)\n\n    const finalTokenIds = []\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIndex) {\n      } else if (!claimedStatus[i][0]) {\n        finalTokenIds.push(tokenIds[i])\n      }\n    })\n\n    const calls4 = finalTokenIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n\n    const rewards = await multiCall(lotteryAbi, calls4)\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), new BigNumber(0))\n\n    return claim\n  } catch (err) {\n    console.error(err)\n  }\n  return new BigNumber(0)\n}\n\nexport const getTotalRewards = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return lotteryContract.methods.getTotalRewards(issueIndex).call()\n}\n\nexport const getMax = async (lotteryContract) => {\n  return lotteryContract.methods.maxNumber().call()\n}\n\nexport const getLotteryIssueIndex = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return issueIndex\n}\n\nexport const getLotteryStatus = async (lotteryContract) => {\n  return lotteryContract.methods.drawed().call()\n}\n\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIndex = await lotteryContract.methods.issueIndex().call()\n  const drawed = await lotteryContract.methods.drawed().call()\n  if (!drawed) {\n    issueIndex -= 1\n  }\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIndex, 5 - matchNumber).call()\n    return amount / 1e18 / LOTTERY_TICKET_PRICE\n  } catch (err) {\n    console.error(err)\n  }\n  return 0\n}\n\nexport const getWinningNumbers = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  const numbers = []\n  const drawed = await lotteryContract.methods.drawed().call()\n\n  if (!drawed && parseInt(issueIndex, 10) === 0) {\n    return [0, 0, 0, 0]\n  }\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIndex - 1, i).call()).toString())\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\n    }\n  }\n  return numbers\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport { useCake } from './useContract'\nimport useRefresh from './useRefresh'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await cakeContract.methods.allowance(account, getLotteryAddress()).call()\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchAllowance()\n    }\n  }, [account, cakeContract, fastRefresh])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\n  const { account } = useWeb3React()\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.error(e)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\n\nexport const useMultiClaimLottery = () => {\n  const { account } = useWeb3React()\n  const lotteryContract = useLottery()\n  const lotteryTicketContract = useLotteryTicket()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\n      return txHash\n    } catch (e) {\n      return false\n    }\n  }, [account, lotteryContract, lotteryTicketContract])\n\n  return { onMultiClaim: handleClaim }\n}\n\nexport const useMultiBuyLottery = () => {\n  const { account } = useWeb3React()\n  const lotteryContract = useLottery()\n\n  const handleBuy = useCallback(\n    async (amount: string, numbers: Array<any>) => {\n      try {\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\n        return txHash\n      } catch (e) {\n        return false\n      }\n    },\n    [account, lotteryContract],\n  )\n\n  return { onMultiBuy: handleBuy }\n}\n\nexport const useMaxNumber = () => {\n  const [max, setMax] = useState(5)\n  const lotteryContract = useLottery()\n\n  const fetchMax = useCallback(async () => {\n    const maxNumber = await getMax(lotteryContract)\n    setMax(maxNumber)\n  }, [lotteryContract])\n\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchMax()\n    }\n  }, [lotteryContract, fetchMax])\n\n  return max\n}\n","import { useCallback, useState } from 'react'\nimport { useLotteryApprove } from './useApprove'\n\nexport const useApproval = (onPresentApprove: () => void) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { onApprove } = useLotteryApprove()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      // user rejected tx or didn't go thru\n      if (!txHash) {\n        setRequestedApproval(false)\n      }\n      onPresentApprove()\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, onPresentApprove])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport default useApproval\n","import React from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\n\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Modal title={TranslateString(466, 'Warning')} onDismiss={onDismiss}>\n      <TicketsList>\n        {TranslateString(468, 'Lottery ticket purchases are final.')}\n        <br />\n        {TranslateString(470, 'Your CAKE will not be returned to you after you spend it to buy tickets.')}\n        <br />\n        {TranslateString(472, 'Tickets are only valid for one lottery draw, and will be burned after the draw.')}\n        <br />\n        {TranslateString(\n          474,\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\n        )}\n      </TicketsList>\n      <ModalActions>\n        <Button width=\"100%\" onClick={onDismiss}>\n          {TranslateString(476, 'I understand')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nconst TicketsList = styled.div`\n  text-align: left;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nexport default WarningModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  availableSymbol: string\n  value: string\n  onSelectMax?: () => void\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void\n}\n\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTokenInput>\n      <Flex alignItems=\"center\">\n        <Input onChange={onChange} placeholder=\"0\" value={value} />\n        <StyledTokenAdornmentWrapper>\n          <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n          <StyledSpacer />\n          <div>\n            <Button size=\"sm\" onClick={onSelectMax}>\n              {TranslateString(452, 'Max')}\n            </Button>\n          </div>\n        </StyledTokenAdornmentWrapper>\n      </Flex>\n      <StyledMaxText>{TranslateString(454, `${max.toLocaleString()} ${availableSymbol} Available`)}</StyledMaxText>\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TicketInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\nimport useI18n from 'hooks/useI18n'\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE } from 'config'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onConfirm?: (amount: string, numbers: Array<number>) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\n  }, [max])\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\n\n  const { onMultiBuy } = useMultiBuyLottery()\n  const maxNumber = useMaxNumber()\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() => [\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n      ])\n      const txHash = await onMultiBuy(LOTTERY_TICKET_PRICE.toString(), numbers)\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > LOTTERY_MAX_NUMBER_OF_TICKETS) {\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\n    } else {\n      setVal(maxTickets.toString())\n    }\n  }, [maxTickets])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * LOTTERY_TICKET_PRICE\n  }\n  return (\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol=\"TICKET\"\n        availableSymbol=\"CAKE\"\n      />\n      <div>\n        <Tips>{TranslateString(999, `1 Ticket = ${LOTTERY_TICKET_PRICE} CAKE`, { num: LOTTERY_TICKET_PRICE })}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {TranslateString(\n            478,\n            'Ticket purchases are final. Your CAKE cannot be returned to you after buying tickets.',\n          )}\n        </Announce>\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} CAKE`)}</Final>\n      </div>\n      <ModalActions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          id=\"lottery-buy-complete\"\n          width=\"100%\"\n          disabled={\n            pendingTx ||\n            parseInt(val) > Number(maxTickets) ||\n            parseInt(val) > LOTTERY_MAX_NUMBER_OF_TICKETS ||\n            parseInt(val) < 1\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #ed4b9e;\n`\n"],"sourceRoot":""}